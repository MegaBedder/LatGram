URL = 'https://api.telegram.org/bot' . api_key . '/'
aURL = 'https://api.telegram.org/file/bot' . api_key . '/'
html = "html"
markdown = "markdown"

// Actualizaciones

funcion actualizaciones()
	consulta = peticion(URL . "getUpdates")
	offset = json_decodificar(consulta)
	offset = offset->result[0]->update_id

	si offset > 0
		offset = offset + 1
		peticion(URL . "getUpdates?offset=" . offset)
	fin

  retorno consulta
fin

funcion verificar_apikey()
	consulta = peticion(URL . "getUpdates")
	res = json_decodificar(consulta)
	retorno res
fin

// bot

funcion ObtenerBot()
	consulta = peticion(URL . "getMe")
	res = json_decodificar(consulta)
	retorno res
fin

bot = ObtenerBot()
bot = {
	"id": bot->result->id,
	"nombre": bot->result->first_name,
	"usuario": bot->result->username
}

// Mensajes


funcion enviarMensaje(chatId, texto, formato, responder)
	enlace = URL . "sendMessage?chat_id=" . chatId . "&text=" . codificar(texto)
	
	si formato
		elegir(formato)
			caso "markdown":
			enlace = enlace . "&parse_mode=markdown"
		
			caso "html":
			enlace = enlace . "&parse_mode=html"
		fin
	fin

	si responder 
		enlace = enlace . "&reply_to_message_id=" . responder
	fin

  json = peticion(enlace)
  estado = json_decodificar(json)
  retorno estado->ok
fin

funcion enviarTeclado(chatId, texto, teclado, formato)
	enlace = URL . "sendMessage?chat_id=" . chatId . "&text=" . codificar(texto) . "&reply_markup=" .codificar(teclado)

	si formato
		elegir(formato)
			caso "markdown":
			enlace = enlace . "&parse_mode=markdown"
		
			caso "html":
			enlace = enlace . "&parse_mode=html"
		fin
	fin
	
  json = peticion(enlace)
  estado = json_decodificar(json)
  retorno estado->ok
fin

funcion enviarAccion(chatId, accion)
	accion = reemplazar(accion, "escribiendo", "typing")
	accion = reemplazar(accion, "subiendo_foto", "upload_photo")
	accion = reemplazar(accion, "subiendo_video", "upload_video")
	accion = reemplazar(accion, "subiendo_audio", "upload_audio")
	accion = reemplazar(accion, "subiendo_documento", "upload_document")
	accion = reemplazar(accion, "grabando_video", "record_video")
	accion = reemplazar(accion, "grabando_audio", "record_audio")
	accion = reemplazar(accion, "buscar_localizacion", "find_location")
	json = peticion(URL . "sendChatAction?chat_id=" . chatId . "&action=" . accion)
	estado = json_decodificar(json)
	retorno estado->ok
fin


funcion reenviarMensaje(chatId, userId, msgId)
	json = peticion(URL . "forwardMessage?chat_id=" . chatId . "&from_chat_id=" . userId . "&message_id=" . msgId)
	estado = json_decodificar(json)
	retorno estado->ok
fin


// Acciones de chat

funcion abandonarChat(chatId)
  	json = peticion(URL . "leaveChat?chat_id=" . chatId)
	estado = json_decodificar(json)
	retorno estado->ok
fin

funcion expulsarUsuario(chatId, userId)
	json = peticion(URL . "kickChatMember?chat_id=" . chatId . "&user_id=" . userId)
	peticion(URL . "unbanChatMember?chat_id=" . chatId . "&user_id=" . userId)
	estado = json_decodificar(json)
	retorno estado->ok
fin

funcion banearUsuario(chatId, userId)
  	json = peticion(URL . "kickChatMember?chat_id=" . chatId . "&user_id=" . userId)
	estado = json_decodificar(json)
	retorno estado->ok
fin

funcion desbanearUsuario(chatId, userId)
  	json = peticion(URL . "unbanChatMember?chat_id=" . chatId . "&user_id=" . userId)
	estado = json_decodificar(json)
	retorno estado->ok
fin

// Juegos

funcion enviarJuego(chatId, juego, notificacion, msgId)
	enlace = URL . "sendGame?chat_id=".chatId."&game_short_name=".juego

	si notificacion
		enlace = enlace . "&disable_notification=true"
	fin

	si msgId
		enlace = enlace . "&reply_to_message_id=".msgId
	fin

  json = peticion(enlace)
  estado = json_decodificar(json)
  retorno estado->ok
 fin

// Enviar x


funcion obtenerArchivo(Id)
	datos = peticion(URL . "getFile?file_id=" . Id)
	status = json_decodificar(datos)

	si status->ok
		sistema('wget --no-check-certificate '.aURL.status->result->file_path)
	fin

  retorno status->ok
fin


funcion enviarFoto(chatId, foto, capcion, notificar, msgId)
	enlace = URL . "sendPhoto?chat_id=".chatId."&photo=".codificar(foto)

	si capcion
		enlace = enlace . "&caption=" . capcion
	fin

	si notificar
		enlace = enlace . "&disable_notification=true"
	fin

	si msgId
		enlace = enlace . "&reply_to_message_id=" . msgId
	fin

  json = peticion(enlace)
  estado = json_decodificar(json)
  retorno estado->ok
fin

funcion enviarAudio(chatId, audio, capcion, notificar, msgId)
	enlace = URL . "sendAudio?chat_id=".chatId."&audio=".codificar(audio)

	si capcion
		enlace = enlace . "&caption=" . capcion
	fin

	si notificar
		enlace = enlace . "&disable_notification=true"
	fin

	si msgId
		enlace = enlace . "&reply_to_message_id=" . msgId
	fin

  json = peticion(enlace)
  estado = json_decodificar(json)
  retorno estado->ok
fin


funcion enviarArchivo(chatId, documento, capcion, notificar, msgId)
	enlace = URL . "sendDocument?chat_id=".chatId."&document=".codificar(documento)

	si capcion
		enlace = enlace . "&caption=" . capcion
	fin

	si notificar
		enlace = enlace . "&disable_notification=true"
	fin

	si msgId
		enlace = enlace . "&reply_to_message_id=" . msgId
	fin

  json = peticion(enlace)
  estado = json_decodificar(json)
  retorno estado->ok
fin


funcion enviarSticker(chatId, sticker, capcion, notificar, msgId)
	enlace = URL . "sendSticker?chat_id=".chatId."&sticker=".codificar(sticker)

	si capcion
		enlace = enlace . "&caption=" . capcion
	fin

	si notificar
		enlace = enlace . "&disable_notification=true"
	fin

	si msgId
		enlace = enlace . "&reply_to_message_id=" . msgId
	fin

  json = peticion(enlace)
  estado = json_decodificar(json)
  retorno estado->ok
fin


funcion enviarVideo(chatId, video, capcion, notificar, msgId)
	enlace = URL . "sendVideo?chat_id=".chatId."&video=".codificar(video)

	si capcion
		enlace = enlace . "&caption=" . capcion
	fin

	si notificar
		enlace = enlace . "&disable_notification=true"
	fin

	si msgId
		enlace = enlace . "&reply_to_message_id=" . msgId
	fin

  json = peticion(enlace)
  estado = json_decodificar(json)
  retorno estado->ok
fin


funcion enviarVoz(chatId, voz, capcion, notificar, msgId)
	enlace = URL . "sendVoice?chat_id=".chatId."&voice=".codificar(voz)

	si capcion
		enlace = enlace . "&caption=" . capcion
	fin

	si notificar
		enlace = enlace . "&disable_notification=true"
	fin

	si msgId
		enlace = enlace . "&reply_to_message_id=" . msgId
	fin

  json = peticion(enlace)
  estado = json_decodificar(json)
  retorno estado->ok
fin


// Enviar archivos desde el servidor

funcion enviariFoto(chatId, foto, capcion, notificar, msgId)
	enlace = URL . "sendPhoto?chat_id=".chatId

	si capcion
		enlace = enlace . "&caption=" . capcion
	fin

	si notificar
		enlace = enlace . "&disable_notification=true"
	fin

	si msgId
		enlace = enlace . "&reply_to_message_id=" . msgId
	fin

  curl = ejecutar_pipe("curl -sk '" . enlace . "' -F 'photo=@".foto."'")
  retorno curl
fin

funcion enviariAudio(chatId, audio, capcion, notificar, msgId)
	enlace = URL . "sendAudio?chat_id=".chatId

	si capcion
		enlace = enlace . "&caption=" . capcion
	fin

	si notificar
		enlace = enlace . "&disable_notification=true"
	fin

	si msgId
		enlace = enlace . "&reply_to_message_id=" . msgId
	fin

  curl = ejecutar_pipe("curl -sk '" . enlace . "' -F 'audio=@".audio."'")
  retorno curl
fin


funcion enviariArchivo(chatId, documento, capcion, notificar, msgId)
	enlace = URL . "sendDocument?chat_id=".chatId

	si capcion
		enlace = enlace . "&caption=" . capcion
	fin

	si notificar
		enlace = enlace . "&disable_notification=true"
	fin

	si msgId
		enlace = enlace . "&reply_to_message_id=" . msgId
	fin

  curl = ejecutar_pipe("curl -sk '" . enlace . "' -F 'document=@".documento."'")
  retorno curl
fin


funcion enviariSticker(chatId, sticker, capcion, notificar, msgId)
	enlace = URL . "sendSticker?chat_id=".chatId

	si capcion
		enlace = enlace . "&caption=" . capcion
	fin

	si notificar
		enlace = enlace . "&disable_notification=true"
	fin

	si msgId
		enlace = enlace . "&reply_to_message_id=" . msgId
	fin

  curl = ejecutar_pipe("curl -sk '" . enlace . "' -F 'sticker=@".sticker."'")
  retorno curl
fin


funcion enviariVideo(chatId, video, capcion, notificar, msgId)
	enlace = URL . "sendVideo?chat_id=".chatId

	si capcion
		enlace = enlace . "&caption=" . capcion
	fin

	si notificar
		enlace = enlace . "&disable_notification=true"
	fin

	si msgId
		enlace = enlace . "&reply_to_message_id=" . msgId
	fin

  curl = ejecutar_pipe("curl -sk '" . enlace . "' -F 'video=@".video."'")
  retorno curl
fin


funcion enviariVoz(chatId, voz, capcion, notificar, msgId)
 	enlace = URL . "sendVoice?chat_id=".chatId

 	si capcion
 		enlace = enlace . "&caption=" . capcion
 	fin

	si notificar
		enlace = enlace . "&disable_notification=true"
	fin

	si msgId
		enlace = enlace . "&reply_to_message_id=" . msgId
	fin

  curl = ejecutar_pipe("curl -sk '" . enlace . "' -F 'voice=@".voz."'")
  retorno curl
fin


// Utilidades del chat

funcion obtenerCuentaMiembros(chatId)
	json = peticion(URL . "getChatMembersCount?chat_id=".chatId)
	res = json_decodificar(json)

	si res->ok
		retorno res->result
	sino
		retorno falso
	fin
fin

// consultas inline

funcion enviarConsultaInline(IdConsulta, resultado)
	json = peticion(URL . "answerInlineQuery?inline_query_id=".IdConsulta."&results=".resultado)
	res = json_decodificar(json)
	retorno res->ok
fin


funcion textoInline(consultaId, titulo, texto, descripcion, formato, url)
	articulo = '[{"type":"article","id":"'.consultaId.'","title":"'.titulo.'","message_text":"'.texto.'"'
  
	si descripcion
		articulo = articulo.',"description":"'.descripcion.'"'
	fin

	si formato
		elegir(formato)
	 		caso "markdown":
			articulo = articulo.',"parse_mode":"markdown"'

			caso "html":
			articulo = articulo.',"parse_mode":"html"'
		fin
	fin

	si url
		articulo = articulo.',"url":"'.url.'"'
	fin

  retorno articulo.'}]'
fin

funcion fotoInline(consultaId, foto, descripcion)
	articulo = '[{"type":"photo","id":"'.consultaId.'","photo_url":"'.foto.'"'
  
	si foto
		articulo = articulo.',"thumb_url":"'.foto.'"'
	fin

	si descripcion
		articulo = articulo.',"description":"'.descripcion.'"'
	fin

  retorno articulo.'}]'
fin
