config = incluir ('ajustes')
URL = 'https://api.telegram.org/bot' . config->api_key . '/'
aURL = 'https://api.telegram.org/file/bot' . config->api_key . '/'
html = "html"
md = "markdown"
incluir ('utilidades')
incluir ('metodos')

verificacion = verificar_apikey()
si ! verificacion->ok
	imprimir("\aERROR (".verificacion->error_code." - ".verificacion->description.")\n\nVerifica la apikey en ajustes.lat", 1)
	retorno 0
fin

inicio = enviarMensaje(config->admin, "<b>Bot iniciado</b>", html, falso)
si inicio
	imprimir("Confirmación enviada a " . config->admin . ".\nBot @".bot->usuario, 1)
sino
	imprimir("Error en confirmación.\nBot @".bot->usuario, 1)
fin

bot = ObtenerBot()
com = redis->conectar("127.0.0.1", 6379)
i=0
funcion iniciar_bot()
	res = json->decodificar(actualizaciones())
	res = res->result[0]
	// traducimos la api
	msj = res->message
	msg = {
		"id": msj->id,
		"texto": msj->text,
		"fecha": msj->date,
		"de": {
			"id": msj->from->id,
			"nombre": msj->from->first_name,
			"apellido": msj->from->last_name,
			"usuario": msj->from->username
		},
		"chat": {
			"id": msj->chat->id,
			"nombre": msj->chat->first_name,
			"apellido": msj->chat->last_name,
			"usuario": msj->chat->username,
			"tipo": msj->chat->type
		}
	}

	nuevo_usuario = {
		"id": msj->new_chat_member->id,
		"nombre": msj->new_chat_member->first_name,
		"apellido": msj->new_chat_member->last_name,
		"usuario": msj->new_chat_member->username
			}

	sticker = msj->sticker
	sticker = {
		"anchura": sticker->width,
		"altura": sticker->height,
		"emoji": sticker->emoji,
		"thumb": {
			"id": sticker->thumb->file_id,
			"peso": sticker->thumb->file_size,
			"anchura": sticker->thumb->width,
			"altura": sticker->thumb->height
		},
		"id": sticker->file_id,
		"peso": sticker->file_size
	}

//		foto = {
//
//		}

	cinline = res->inline_query
	cinline = {
		"id": cinline->id,
		"consulta": cinline->query
		}

	bot = bot->result
	bot = {
			"id": bot->id,
			"nombre": bot->first_name,
			"usuario": bot->username
		}

si (res)
si config->ires ires() fin
desde (i=0; i<(plugin->comandos-1); i++)
	matches = cadena->match(msg->texto, plugin->comandos[i])
	matches = matches[0]
	blocks = matches
	si matches
		si convertir->cadena(in->accion) == "funcion"
			in->accion()
			imprimir("\nComando ejecutado: ".matches[0]."\nUsuario: ".msg->de->nombre."\nID: ".msg->de->id, 1)
		fin
	fin
fin
fin
fin

mientras verdadero
	iniciar_bot()
fin

redis->desconectar(com)
