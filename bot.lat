config = incluir ('ajustes')
URL = 'https://api.telegram.org/bot' . config->api_key . '/'
aURL = 'https://api.telegram.org/file/bot' . config->api_key . '/'
html = "html"
md = "markdown"
incluir ('utilidades')
incluir ('metodos')

verificacion = verificar_apikey()
si ! verificacion->ok
	imprimir("\aERROR (".verificacion->error_code." - ".verificacion->description.")\n\nVerifica la apikey en ajustes.lat", 1)
	retorno 0
fin

inicio = enviarMensaje(config->admin, "<b>Bot iniciado</b>", html, falso)
si inicio
	imprimir("Confirmación enviada a " . config->admin . ".\nBot @".bot->usuario, 1)
sino
	imprimir("Error en confirmación.\nBot @".bot->usuario, 1)
fin

bot = ObtenerBot()
com = redis->conectar("127.0.0.1", 6379)

funcion iniciar_bot()
	res = json->decodificar(actualizaciones())
	res = res->result[0]
	// traducimos la api
	msg = res->message
	msg = {
		"id": msg->id,
		"texto": msg->text,
		"fecha": msg->date,
		"de": {
			"id": msg->from->id,
			"nombre": msg->from->first_name,
			"apellido": msg->from->last_name,
			"usuario": msg->from->username
		},
		"chat": {
			"id": msg->chat->id,
			"nombre": msg->chat->first_name,
			"apellido": msg->chat->last_name,
			"usuario": msg->chat->username,
			"tipo": msg->chat->type
		}
	}

	nuevo_usuario = {
		"id": msg->new_chat_member->id,
		"nombre": msg->new_chat_member->first_name,
		"apellido": res->message->new_chat_member->last_name,
		"usuario": res->message->new_chat_member->username
			}

		sticker = {
			"anchura": res->message->sticker->width,
			"altura": res->message->sticker->height,
			"emoji": res->message->sticker->emoji,
			"thumb": {
				"archivo_id": res->message->sticker->thumb->file_id,
				"archivo_t": res->message->sticker->thumb->file_size,
				"anchura": res->message->sticker->thumb->width,
				"altura": res->message->sticker->thumb->height
			},
			"archivo_id": res->message->sticker->file_id,
			"archivo_t": res->message->sticker->file_size
		}

//		foto = {
//
//		}

	inline = {
		"id": res->inline_query->id,
		"consulta": res->inline_query->query
		}

	bot = {
			"id": bot->result->id,
			"nombre": bot->result->first_name,
			"usuario": bot->result->username
		}
si (res)
si config->ires == verdadero ires() fin
desde (o=0; o<config->plugins; o++) // aumento cada vez la variable 'o' hasta el tamaño de la lista de los plugins
	plugin = incluir(config->dir.config->plugins[o]) // incluyo plugin por plugin
	imprimir(tipo(plugin)) # convierte el diccionario a cadena si lo corres
	in = plugin->comandos[lista->longitud(plugin->comandos)-1] // obtenemos el array ultimo del retorno para acortarlo
	si convertir->cadena(in->subproceso) == "funcion" // convertimos a cadena
		retorna = in->subproceso()
		si retorna imprimir("\nSubproceso: ".retorna, 1) fin
	fin
	desde (i=0; i<(plugin->comandos-1); i++)
		matches = cadena->match(msg->texto, plugin->comandos[i])
		matches = matches[0]
		blocks = matches
		si matches
			si convertir->cadena(in->accion) == "funcion"
				in->accion()
				imprimir("\nComando ejecutado: ".matches[0]."\nUsuario: ".msg->de->nombre."\nID: ".msg->de->id, 1)
			fin
		fin
	fin
fin
fin
fin

mientras verdadero
	iniciar_bot()
fin
redis->desconectar(com)
