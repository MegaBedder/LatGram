config = incluir ('ajustes')
incluir ('metodos')
incluir ('utilidades')

verificacion = verificar_apikey()
si ! verificacion->ok
	imprimir("\aERROR (".verificacion->error_code." - ".verificacion->description.")\n\nVerifica la apikey en ajustes.lat", 1)
	retorno 0
fin

inicio = enviarMensaje(config->admin, "<b>Bot iniciado</b>", html, falso)
si inicio
	imprimir("Confirmación enviada a " . config->admin . ".\nBot @".bot->usuario, 1)
sino
	imprimir("Error en confirmación.\nBot @".bot->usuario, 1)
fin


mientras verdadero
	res = json->decodificar(actualizaciones())
	msg = {
		"texto": res->result[0]->message->text,
		"id": res->result[0]->message->message_id,
		"fecha": res->result[0]->message->date,
		"fecha_reenvio": res->result[0]->message->forward_date,
		"fecha_editado": res->result[0]->message->edit_date,
		"capcion": res->result[0]->message->caption,
		"nuevo_titulo": res->result[0]->message->new_chat_title,
		"foto_eliminada": res->result[0]->message->delete_chat_photo,
		"grupo_chat_creado": res->result[0]->message->group_chat_created,
		"supergrupo_creado": res->result[0]->message->supergroup_chat_created,
		"canal_chat_creado": res->result[0]->message->channel_chat_created,
		"migrado_para_id": res->result[0]->message->migrate_to_chat_id,
		"migrado_desde_id": res->result[0]->message->migrate_from_chat_id
		}

	usuario = {
		"id": res->result[0]->message->from->id,
		"nombre": res->result[0]->message->from->first_name,
		"apellido": res->result[0]->message->from->last_name,
		"usuario": res->result[0]->message->from->username
			}

	chat = {
		"id": res->result[0]->message->chat->id,
		"titulo": res->result[0]->message->chat->title,
		"usuario": res->result[0]->message->chat->username
			}

	nuevo_usuario = {
		"id": res->result[0]->message->new_chat_member->id,
		"nombre": res->result[0]->message->new_chat_member->first_name,
		"apellido": res->result[0]->message->new_chat_member->last_name,
		"usuario": res->result[0]->message->new_chat_member->username
			}

	inline = {
		"id": res->result[0]->inline_query->id,
		"consulta": res->result[0]->inline_query->query
			}

//desde (x=0; x<(lista->longitud(config->plugins)); x++)
incluir("plugins/test")
com1 = comandos[lista->longitud(comandos)-1]
com2 = comandos[lista->longitud(comandos)-2]
desde (i=0; i<(lista->longitud(comandos)-1); i++)
//	si msg->texto imprimir(msg->texto." desde ") fin
	matches = cadena->match(msg->texto, comandos[i])
	si convertir->cadena(com1->subproceso) == "funcion"
		com1->subproceso()
	osi convertir->cadena(com2->subproceso) == "funcion"
		com2->subproceso()
	fin
	si matches
 		si convertir->cadena(com1->accion) == "funcion"
			com1->accion()
		osi convertir->cadena(com2->accion) == "funcion"
			com2->accion()
		fin
	fin
fin
fin
