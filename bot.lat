config = incluir ('ajustes')
incluir ('utilidades')
incluir ('metodos')

verificacion = verificar_apikey()
si ! verificacion->ok
	imprimir("\aERROR (".verificacion->error_code." - ".verificacion->description.")\n\nVerifica la apikey en ajustes.lat", 1)
	retorno 0
fin

inicio = enviarMensaje(config->admin, "<b>Bot iniciado</b>", html, falso)
si inicio
	imprimir("Confirmación enviada a " . config->admin . ".\nBot @".bot->usuario, 1)
sino
	imprimir("Error en confirmación.\nBot @".bot->usuario, 1)
fin

bot = ObtenerBot()
com = redis->conectar("127.0.0.1", 6379)
funcion iniciar_bot()
mientras verdadero
	res = json->decodificar(actualizaciones())
	res = res->result[0]
	msg = {
		"texto": res->message->text,
		"id": res->message->message_id,
		"fecha": res->message->date,
		"fecha_reenvio": res->message->forward_date,
		"fecha_editado": res->message->edit_date,
		"capcion": res->message->caption,
		"nuevo_titulo": res->message->new_chat_title,
		"foto_eliminada": res->message->delete_chat_photo,
		"grupo_chat_creado": res->message->group_chat_created,
		"supergrupo_creado": res->message->supergroup_chat_created,
		"canal_chat_creado": res->message->channel_chat_created,
		"migrado_para_id": res->message->migrate_to_chat_id,
		"migrado_desde_id": res->message->migrate_from_chat_id
		}

	usuario = {
		"id": res->message->from->id,
		"nombre": res->message->from->first_name,
		"apellido": res->message->from->last_name,
		"usuario": res->message->from->username
			}

	chat = {
		"id": res->message->chat->id,
		"titulo": res->message->chat->title,
		"usuario": res->message->chat->username
			}

	nuevo_usuario = {
		"id": res->message->new_chat_member->id,
		"nombre": res->message->new_chat_member->first_name,
		"apellido": res->message->new_chat_member->last_name,
		"usuario": res->message->new_chat_member->username
			}

	inline = {
		"id": res->inline_query->id,
		"consulta": res->inline_query->query
		}

	bot = {
			"id": bot->result->id,
			"nombre": bot->result->first_name,
			"usuario": bot->result->username
		}

incluir("plugins/test")
si (res)
in = comandos[lista->longitud(comandos)-1]

si convertir->cadena(in->subproceso) == "funcion"
	retorna = in->subproceso()
	si retorna imprimir("Subproceso: ".retorna, 1) fin
fin

desde (i=0; i<(lista->longitud(comandos)-1); i++)
	matches = cadena->match(msg->texto, comandos[i])
	matches = matches[0]
	si matches
 		si convertir->cadena(in->accion) == "funcion"
			in->accion()
			imprimir("\nComando ejecutado: ".matches[0]."\nUsuario: ".usuario->nombre."\nID: ".usuario->id, 1)
		fin
	fin
fin
fin
fin
fin


iniciar_bot()
