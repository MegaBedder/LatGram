#!/usr/bin/latino
config = incluir ('ajustes')
URL = 'https://api.telegram.org/bot' . config->api_key . '/'
aURL = 'https://api.telegram.org/file/bot' . config->api_key . '/'
html = "html"
md = "markdown"
incluir ('utilidades')
incluir ('metodos')

bot = ObtenerBot()
bot = bot->result
bot = {
	"id": bot->id,
	"nombre": bot->first_name,
	"usuario": bot->username
}

verificacion = verificar_apikey()
si ! verificacion->ok
	imprimir("\aERROR (".verificacion->error_code." - ".verificacion->description.")\n\nVerifica la apikey en ajustes.lat", 1)
	retorno 0
fin

com = redis->conectar(config->redis_ip, config->redis_puerto)

inicio = enviarMensaje(config->admin, "<b>Bot iniciado</b>", html, falso)
si inicio
	imprimir("Confirmación enviada a " . config->admin . ".\nBot @".bot->usuario, 1)
sino
	imprimir("Error en confirmación.\nBot @".bot->usuario, 1)
fin

si config->limpiar_updates_al_iniciar
	updates = limpiar_updates()
	si updates
		imprimir("Actualizaciones limpias con un total de ".updates."\n", 1)
	fin
fin

plugins = cargar_plugins()
funcion iniciar_bot()
	// traducimos la api
	msj = res->message
	msg = {
		"id": msj->id,
		"texto": msj->text,
		"fecha": msj->date,
		"de": {
			"id": msj->from->id,
			"nombre": msj->from->first_name,
			"apellido": msj->from->last_name,
			"usuario": msj->from->username
		},
		"chat": {
			"id": msj->chat->id,
			"nombre": msj->chat->first_name,
			"apellido": msj->chat->last_name,
			"usuario": msj->chat->username,
			"tipo": msj->chat->type
		}
	}

	nuevo_usuario = {
		"id": msj->new_chat_member->id,
		"nombre": msj->new_chat_member->first_name,
		"apellido": msj->new_chat_member->last_name,
		"usuario": msj->new_chat_member->username
	}

	respuesta = msj->reply_to_message
	respuesta = {
		"texto": respuesta->text,
		"fecha": respuesta->date,
		"de": {
			"tipo": respuesta->chat->type,
			"id": respuesta->chat->id,
			"usuario": respuesta->chat->username,
			"nombre": respuesta->chat->first_name
		},
		"sticker": {
			"id": respuesta->sticker->file_id,
			"thumb": {
				"id": respuesta->sticker->thumb->file_id,
				"peso": respuesta->sticker->thumb->file_size,
				"anchura": respuesta->sticker->thumb->width,
				"altura": respuesta->sticker->thumb->height
			},
			"peso": respuesta->sticker->file_size,
			"emoji": respuesta->sticker->emoji,
			"anchura": respuesta->sticker->width,
			"altura": respuesta->sticker->height
		},
		"msg_id": respuesta->message_id,
		"a": {
			"id": respuesta->from->id,
			"usuario": respuesta->from->username,
			"first_name": respuesta->from->first_name
		}
	}

	sticker = msj->sticker
	sticker = {
		"anchura": sticker->width,
		"altura": sticker->height,
		"emoji": sticker->emoji,
		"thumb": {
			"id": sticker->thumb->file_id,
			"peso": sticker->thumb->file_size,
			"anchura": sticker->thumb->width,
			"altura": sticker->thumb->height
		},
		"id": sticker->file_id,
		"peso": sticker->file_size
	}

	cinline = res->inline_query
	cinline = {
		"id": cinline->id,
		"consulta": cinline->query
	}
	si config->ires ires() fin
	desde (o=0; o<plugins; o++)
		si convertir->cadena(plugins[o]->subproceso) == "funcion" // convertimos a cadena y obligamos al usuario a usar una función
			retorna = plugins[o]->subproceso()
			si retorna imprimir("\nSubproceso: ".retorna, 1) fin
		fin
		si plugins[o]->comandos
			desde (i=0; i<(plugins[o]->comandos); i++)
				si msg->texto
					matches = cadena->match(msg->texto, plugins[o]->comandos[i])
					si matches
						matches = matches[0]
						blocks = matches
						si convertir->cadena(plugins[o]->accion) == "funcion"
							plugins[o]->accion()
							imprimir("\nComando ejecutado: ".matches[0]."\nUsuario: ".msg->de->nombre."\nID: ".msg->de->id, 1)
						fin
					fin
				fin
			fin
		fin
	fin
fin

mientras verdadero
	res = json->decodificar(actualizaciones())
	si res
		res = res->result[0]
		iniciar_bot()
	fin
fin

redis->desconectar(com)
