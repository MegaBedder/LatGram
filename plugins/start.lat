funcion mensajes()
  si matches[1] == "id"
          enviarMensaje(msg->chat->id, "*Chat ID*: ".msg->chat->id."\n*User ID*: ".msg->de->id, md)
  fin
  si matches[1] == "start"
          ayuda = [[{"text":"Programaci칩n Latino","url":"https://github.com/primitivorm/latino"},
          {"text":"Repositorio del Bot","url":"https://github.com/jarriztg/telegram-bot-latino"}],
          [{"text":"Repositorio del Bot","url":"https://github.com/jarriztg/telegram-bot-latino"}]]
          enviarTeclado(msg->chat->id, "춰Hey! ".no_markdown(msg->de->nombre)."\n\nEst치s probando el nuevo bot escrito completamente en la *programaci칩n Latino*. Por el momento faltan cosas. Pero de poco a poco ir치 mejorando 游땏游녨", ayuda, md)
  fin
  si matches[1] == "comando"
          hash = "custom:".msg->chat->id.":comando"
          shash = "custom:".msg->chat->id.":scomando"
          ok = enviarMensaje(msg->chat->id, "*Nuevo comando*: !".matches[2]."\nResponde: ".matches[3], md)
          si ok
                  redis->hasignar(com, hash, "!".matches[2], matches[3])
                  redis->sagregar(com, shash, "!".matches[2])
          sino
                  enviarMensaje(msg->chat->id, "*Error de markdown*", md)
          fin
  fin
  si matches[1] == "comandos"
          lista = redis->smiembros(com, "custom:".msg->chat->id.":scomando")
          si lista
                  desde (i=0; i<lista; i++)
                          imprimir(lista[i])
                  fin
          fin
  fin
  si matches[1] == "bienvenida"
          si ! usuario_es_admin(msg->chat->id, msg->de->id)
                  enviarMensaje(msg->chat->id, "*No eres administrador en el grupo*", md)
                  retornar 0
          fin
          hash = "status:".msg->chat->id.":bienvenida"
          hash2 = "custom:".msg->chat->id.":bienvenida"
          estado = redis->obtener(com, hash)
          elegir(matches[2])
                  caso "on":
                          si estado == "on"
                                  enviarMensaje(msg->chat->id, "La bienvenida *ya est치 activada*", md)
                          sino
                                  redis->asignar(com, hash, matches[2])
                                  enviarMensaje(msg->chat->id, "La bienvenida *activada*", md)
                          fin
                  caso "off":
                          si estado == "off"
                                  enviarMensaje(msg->chat->id, "La bienvenida *ya est치 desactivada*", md)
                          sino
                                  redis->asignar(com, hash, matches[2])
                                  enviarMensaje(msg->chat->id, "La bienvenida *desactivada*", md)
                          fin
                  defecto:
                          ok = enviarMensaje(msg->chat->id, "*Nueva bienvenida asignada*:\n".matches[2], md)
                          si ! ok
                                  enviarMensaje(msg->chat->id, "*El markdown est치 mal.*", md)
                          sino
                                  redis->asignar(com, hash2, matches[2])
                          fin
                  fin
          fin
fin

retornar {
  "comandos": [
        "^/(id)$",
        "^/(test)$",
        "^/(id)@".bot->usuario."$",
        "^/(start)$",
        "^/(start)@".bot->usuario."$",
        "^/(bienvenida) (.+)$",
        "^/(comando) !([a-Z]+) (.*)$",
        "^/(comandos)$"
 ],
 "accion": mensajes
}
