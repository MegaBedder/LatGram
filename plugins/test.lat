funcion subproceso()
  hash = "status:".msg->chat->id.":bienvenida"
  hash2 = "custom:".msg->chat->id.":bienvenida"
  nombre_usuario = nuevo_usuario->usuario
  si sticker->archivo_id
    enviarMensaje(msg->chat->id, sticker->archivo_id, md)
  fin
  si ! nombre_usuario
    nombre_usuario = "(sin usuario)"
  fin
  bienvenida = redis->obtener(com, hash)
  bienvenida_custom = redis->obtener(com, hash2)
  si bienvenida == "on"
    si nuevo_usuario->id
      si bienvenida_custom
        mensaje = cadena->reemplazar(bienvenida_custom, "$usuario", convertir->cadena(nombre_usuario))
        mensaje = cadena->reemplazar(mensaje, "$id", convertir->cadena(nuevo_usuario->id))
        mensaje = cadena->reemplazar(mensaje, "$nombre", convertir->cadena(nuevo_usuario->nombre))
        mensaje = cadena->reemplazar(mensaje, "$titulo", convertir->cadena(chat->titulo))
      sino
        mensaje = "Bienvenido ".nuevo_usuario->nombre." a ".chat->titulo
      fin
        enviarMensaje(msg->chat->id, mensaje, md)
        retornar "Nuevo miembro en ".chat->titulo."\nMiembro: ".nuevo_usuario->nombre." (".nuevo_usuario->id.")"
    fin
  fin
  hash = "custom:".msg->chat->id.":comando"
  comando_nuevo = redis->hobtener(com, hash, msg->texto)
  si comando_nuevo
    enviarMensaje(msg->chat->id, comando_nuevo, md)
    retorno "comando personalizado ejecutado"
  fin
  retornar falso
fin

funcion mensajes()
  si matches[1] == "id"
    enviarMensaje(msg->chat->id, "*Chat ID*: ".msg->chat->id."\n*User ID*: ".msg->de->id, md)
  fin
  si matches[1] == "start"
    ayuda = '{"inline_keyboard":[[{"text":"Programaci칩n Latino","url":"https://github.com/primitivorm/latino"},{"text":"Repositorio del Bot","url":"https://github.com/jarriztg/telegram-bot-latino"}]]}'
  	enviarTeclado(msg->chat->id, "춰Hey! ".no_markdown(msg->de->nombre)."\n\nEst치s probando el nuevo bot escrito completamente en la *programaci칩n Latino*. Por el momento faltan cosas. Pero de poco a poco ir치 mejorando 游땏游녨", ayuda, md)
  fin
  si matches[1] == "comando"
    hash = "custom:".msg->chat->id.":comando"
    ok = enviarMensaje(msg->chat->id, "*Nuevo comando*: !".matches[2]."\nResponde: ".matches[3], md)
    si ok
      redis->hasignar(com, hash, "!".matches[2], matches[3])
    sino
      enviarMensaje(msg->chat->id, "*Error de markdown*", md)
    fin
  fin
  si matches[1] == "bienvenida"
    si ! usuario_es_admin(msg->chat->id, msg->de->id)
      enviarMensaje(msg->chat->id, "*No eres administrador en el grupo*", md)
      retornar 0
    fin
    hash = "status:".msg->chat->id.":bienvenida"
    hash2 = "custom:".msg->chat->id.":bienvenida"
    estado = redis->obtener(com, hash)
    elegir(matches[2])
    caso "on":
      si estado == "on"
        enviarMensaje(msg->chat->id, "La bienvenida *ya est치 activada*", md)
      sino
        redis->asignar(com, hash, matches[2])
        enviarMensaje(msg->chat->id, "La bienvenida *activada*", md)
      fin
    caso "off":
      si estado == "off"
        enviarMensaje(msg->chat->id, "La bienvenida *ya est치 desactivada*", md)
      sino
        redis->asignar(com, hash, matches[2])
        enviarMensaje(msg->chat->id, "La bienvenida *desactivada*", md)
      fin
    defecto:
      ok = enviarMensaje(msg->chat->id, "*Nueva bienvenida asignada*:\n".matches[2], md)
      si ! ok
        enviarMensaje(msg->chat->id, "*El markdown est치 mal.*", md)
      sino
        redis->asignar(com, hash2, matches[2])
      fin
    fin
  fin
fin

retornar {
  "comandos": [
        "^/(id)$",
        "^/(test)$",
        "^/(id)@".bot->usuario."$",
        "^/(start)$",
        "^/(start)@".bot->usuario."$",
        "^/(bienvenida) (.+)$",
        "^/(comando) !([a-Z]+) (.*)$",
  {
   "accion": mensajes,
   "subproceso": subproceso
  }
 ]
}
