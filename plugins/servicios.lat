global funcion configurar_grupo(chatid)
        si config.grupos.permitidos
                shash = "ajustes:"..chatid
                desde (i=0; i<config.grupos.permitidos; i++)
                        redis.sagregar(com, shash, config.grupos.permitidos[i])
                fin
                redis.sagregar(com, BOT_SHASH, acadena(chatid))
                retornar verdadero
        fin
        retornar falso
fin

global funcion desconfigurar_grupo(chatid)
        redis.borrar(com, "ajustes:"..chatid..":customs")
        redis.borrar(com, "ajustes:"..chatid)
        redis.borrar(com, "extras:"..chatid)
        redis.borrar(com, "extras:"..chatid..":customs")
        redis.sborrar(com, BOT_SHASH, acadena(chatid))
fin

global funcion detectar_spam_usuario(texto)
        desde(i=0;i<config.regex.matches_spam_usuario;i++)
                spam_match = cadena.match(texto, config.regex.matches_spam_usuario[i])
                si spam_match
                        desde(v=0;v<lista.longitud(spam_match);v++)
                                es_chat = obtenerChat("@"..spam_match[v][1])
                                si es_chat
                                        retornar verdadero
                                fin
                        fin
                fin
        fin
        retornar falso
fin

global funcion detectar_spam_link(texto)
        desde(i=0;i<config.regex.matches_spam_usuario;i++)
                spam_match = cadena.match(texto, config.regex.matches_spam_links[i])
                si spam_match
                        retornar verdadero
                fin
        fin
        retornar falso
fin

global funcion nuevo_usuario()
        bienvenida_custom = redis.hobtener(com, "ajustes:"..msg.chat.id..":customs", "bienvenida")
        nombre_usuario = msg.agregado.usuario
        si ! nombre_usuario
                nombre_usuario = "(sin usuario)"
        sino
                nombre_usuario = "@"..nombre_usuario
        fin
        si bienvenida_custom
                mensaje = cadena.reemplazar(bienvenida_custom, "$usuario", no_markdown(nombre_usuario))
                mensaje = cadena.reemplazar(mensaje, "$id", acadena(msg.agregado.id))
                mensaje = cadena.reemplazar(mensaje, "$nombre", no_markdown(msg.agregado.nombre))
                mensaje = cadena.reemplazar(mensaje, "$titulo", no_markdown(msg.chat.titulo))
        sino
                mensaje = cadena.reemplazar(config.grupos.bienvenida_por_defecto, "$usuario", no_markdown(nombre_usuario))
                mensaje = cadena.reemplazar(mensaje, "$id", acadena(msg.agregado.id))
                mensaje = cadena.reemplazar(mensaje, "$nombre", no_markdown(msg.agregado.nombre))
                mensaje = cadena.reemplazar(mensaje, "$titulo", no_markdown(msg.chat.titulo))
        fin
        si mensaje
                retornar mensaje
        fin
        retornar falso
fin


global funcion comando_personalizado()
        hash = "extras:"..msg.chat.id..":customs"
        comando_nuevo = redis.hobtener(com, hash, msg.texto)
        si comando_nuevo
                retornar comando_nuevo
        fin
        retornar falso
fin

global funcion subproceso_reglas()
        array = obtenerLeer(msg.de.id, msg.texto, 1)
        si array
                stp = msg.texto ~= "^[Dd][Ee][Tt][Ee][Nn][Ee][Rr]$" || msg.texto ~= "^[Ss][Tt][Oo[Pp]"
                si !stp
                        chash = "ajustes:"..msg.chat.id..":customs"
                        ok = enviarMensaje(msg.chat.id, "*Nuevas reglas asignadas*:\n"..msg.texto, md)
                        detenerLeer(msg.de.id, 1)
                        si ! ok
                                enviarMensaje(msg.chat.id, "*Verifica el markdown*.", md)
                        sino
                                redis.hasignar(com, chash, "reglas", msg.texto)
                        fin
                sino
                        enviarMensaje(msg.chat.id, "*Proceso abortado*.", md)
                        detenerLeer(msg.de.id, 1)
                fin
                retornar verdadero
        fin
        retornar falso
fin

global funcion aviso_flood(chatid, id, max_mensajes, max_tiempo)
        si id
                si redis.sesmiembro(com, AHASH, "flood") retornar falso fin
                hash = "tmp:"..id..":flood:chat:"..chatid
                tiempo = redis.tiempo(com, hash)
                si tiempo
                        a = redis.aumentar(com, hash)
                        si a > max_mensajes
                                redis.borrar(com, hash)
                                retornar verdadero
                        fin
                sino
                        redis.setex(com, hash, "0", max_tiempo)
                fin
        fin
        retornar falso
fin

global funcion arabe_detectado(cad)
        si cadena.match(cad, "[ء-ي]+")
                retornar verdadero
        fin
        retornar falso
fin

global funcion es_link(t)
        si t
                si config.regex.links == 1
                        si cadena.match(t, config.regex.links[0])
                                retornar verdadero
                        fin
                sino
                        si config.regex.links
                                desde(u=0;u<config.regex.links;u++)
                                        si cadena.match(t, config.regex.links[u])
                                                retornar verdadero
                                        fin
                                fin
                        fin
                fin
        fin
        retornar falso
fin

funcion subproceso()
        si msg.chat.tipo == "private"
                si msg.de.usuario
                        registrar_id_usuario(msg.de.usuario, msg.de.id)
                fin
                retornar 0
        fin
        AHASH = "ajustes:"..msg.chat.id
        CHASH = "ajustes:"..msg.chat.id..":customs"


        /* requieren msg.capcion */
        si msg.capcion
                si detectar_spam_usuario(msg.capcion) || detectar_spam_link(msg.capcion)
                        es_miembro = !redis.sesmiembro(com, AHASH, "spam")
                        si es_miembro
                                accion = banearUsuario(msg.chat.id, msg.de.id)
                                si !accion
                                        retornar "spam en chat en "..msg.chat.titulo.."\nDe: "..msg.de.nombre.."\nId: "..msg.de.id.."\nMensaje: "..msg.texto.."\nEstado: sin expulsar"
                                fin
                                enviarMensaje(msg.chat.id, "Usuario "..no_markdown(msg.de.nombre).." *baneado por spam*.", md)
                                retornar "spam en chat en "..msg.chat.titulo.."\nDe: "..msg.de.nombre.."\nId: "..msg.de.id.."\nMensaje: "..msg.texto.."\nEstado: expulsado"
                        fin
                fin
        fin // fin msg.capcion

        /* requieren msg.texto */
        si msg.texto
                tim = redis.hobtener(com, CHASH, "maxfloodm")
                tit = redis.hobtener(com, CHASH, "maxfloodt")
                max_mensajes = config.grupos.max_mensajes_flood
                max_tiempo = config.grupos.max_tiempo_flood
                si tim max_mensajes = tim fin
                si tit max_tiempo = tit fin
                flood_ = aviso_flood(msg.chat.id, msg.de.id, anumero(max_mensajes), anumero(max_tiempo))
                si flood_
                        si !es_creador(msg.de.id) && !es_gadmin(msg.de.id) && !es_gmod(msg.de.id) && !es_mod(msg.chat.id, msg.de.id)
                                si banearUsuario(msg.chat.id, msg.de.id)
                                        enviarMensaje(msg.chat.id, "El miembro "..no_markdown(msg.de.nombre).." *ha sido baneado por flood*.", md)
                                        retornar "Miembro "..msg.de.nombre.." baneado por flood del grupo "..msg.chat.titulo.."."
                                fin
                        fin
                fin
                si msg.de.usuario registrar_id_usuario(msg.de.usuario, msg.de.id) fin
                si detectar_spam_usuario(msg.texto) || detectar_spam_link(msg.texto)
                        si !es_creador(msg.de.id) && !es_gadmin(msg.de.id) && !es_gmod(msg.de.id) && !es_mod(msg.chat.id, msg.de.id)
                                si !redis.sesmiembro(com, AHASH, "spam")
                                        accion = banearUsuario(msg.chat.id, msg.de.id)
                                        si !accion
                                                retornar "spam en chat en "..msg.chat.titulo.."\nDe: "..msg.de.nombre.."\nId: "..msg.de.id.."\nMensaje: "..msg.texto.."\nEstado: sin expulsar"
                                        fin
                                        enviarMensaje(msg.chat.id, no_markdown(msg.de.nombre).." *baneado por spam*.", md)
                                        retornar "spam en chat en "..msg.chat.titulo.."\nDe: "..msg.de.nombre.."\nId: "..msg.de.id.."\nMensaje: "..msg.texto.."\nEstado: expulsado"
                                fin
                        fin
                fin
                si subproceso_reglas()
                        retornar "Opción de reglas "
                fin

                si arabe_detectado(msg.texto)
                        si !redis.sesmiembro(com, AHASH, "arabes")
                                baneado = banearUsuario(msg.chat.id, msg.agregado.id)
                                si baneado
                                        enviarMensaje(msg.chat.id, "Mensaje arabe, *expulsado*.", md)
                                fin
                                retornar "ALLAHU AKBAR "..msg.agregado.id
                        fin
                fin

                si comando_personalizado()
                        si redis.sesmiembro(com, AHASH, "extras")
                                enviarMensaje(msg.chat.id, comando_personalizado(), md)
                                retornar "comando personalizado ejecutado ("..msg.texto..")"
                        fin
                fin


                si es_link(msg.texto)
                        si !redis.sesmiembro(com, AHASH, "links")
                                si banearUsuario(msg.chat.id, msg.de.id)
                                        enviarMensaje(msg.chat.id, "El usuario "..no_markdown(msg.de.nombre).." *ha sido baneado por poner links*.", md)
                                        retornar("Link en grupo "..msg.chat.titulo)
                                fin
                        fin
                fin
        fin // fin de msg.texto

        /* requieren msg.agregado.id */
        si msg.agregado.id
                si es_gban(msg.agregado.id)
                        si banearUsuario(msg.chat.id, msg.agregado.id)
                                ban = es_gban(msg.agregado.id)
                                motivo = ban.motivo
                                si !motivo
                                        motivo = "_no asignado_"
                                fin
                                enviarMensaje(msg.chat.id, "El usuario "..no_markdown(msg.agregado.nombre).." *está globalmente baneado*."
                                .."\n*Motivo*: "..motivo, md)
                                retornar "Usuario expulsado globalmente baneado "..msg.agregado.nombre.."."
                        fin
                fin

                si bot_agregado(bot.id, msg.agregado.id)
                        configurar_grupo(msg.chat.id)
                        enviarMensaje(msg.chat.id, "¡Hola! soy "..bot.nombre..", gracias por añadirme a este chat.")
                        retornar "Bot añadido a "..msg.chat.titulo
                fin

                si arabe_detectado(msg.agregado.nombre)
                        si !redis.sesmiembro(com, AHASH, "arabes")
                                banearUsuario(msg.chat.id, msg.agregado.id)
                                retornar "ALLAHU AKBAR "..msg.agregado.id
                        fin
                osi arabe_detectado(msg.agregado.apellido)
                        si !redis.sesmiembro(com, AHASH, "arabes")
                                banearUsuario(msg.chat.id, msg.agregado.id)
                                retornar "allahu akbar "..msg.agregado.id
                        fin
                fin

                si nuevo_usuario()
                        si msg.agregado.usuario
                                registrar_id_usuario(msg.agregado.usuario, msg.agregado.id)
                        fin
                        si es_bot(msg.agregado.id)
                                si !redis.sesmiembro(com, AHASH, "bots")
                                        si banearUsuario(msg.chat.id, msg.agregado.id)
                                                enviarMensaje(msg.chat.id, "Bots *no permitidos* en este chat, expulsado.", md)
                                                retornar "Bot eliminado de "..msg.chat.titulo
                                        fin
                                fin
                        fin
                        si redis.sesmiembro(com, AHASH, "bienvenida")
                                enviarMensaje(msg.chat.id, nuevo_usuario(), md)
                                retornar "Nuevo miembro en "..msg.chat.titulo.."\nMiembro: "..msg.agregado.nombre.." ("..msg.agregado.id..")"
                        fin
                fin
        fin // fin msg.agregado.id

        /* requieren msg.eliminado.id */
        si msg.eliminado.id
                si bot_eliminado()
                        desconfigurar_grupo(msg.chat.id)
                        retornar "Bot eliminado de "..msg.chat.titulo
                fin
        fin // fin msg.eliminado.id
fin

retornar {
        "subproceso": subproceso
}
