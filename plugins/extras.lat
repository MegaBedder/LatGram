funcion mensajes()
        si matches[1] == "comando"
                elegir(matches[3])
                        caso "borrar":
                                hash = "custom:".msg->chat->id.":comando"
                                existe = redis->hobtener(com, hash, "!".matches[2])
                                si existe
                                        redis->hborrar(com, hash, "!".matches[2])
                                        enviarMensaje(msg->chat->id, "El comando *!".matches[2]."* fué eliminado con éxito.", md)
                                        retornar 1
                                fin
                                enviarMensaje(msg->chat->id, "El comando *!".matches[2]."* no existe.", md)
                        defecto:
                                hash = "custom:".msg->chat->id.":comando"
                                shash = "custom:".msg->chat->id.":scomando"
                                ok = enviarMensaje(msg->chat->id, "*Nuevo comando*: !".matches[2]."\nResponde: ".matches[3], md)
                                si ok
                                        redis->hasignar(com, hash, "!".matches[2], matches[3])
                                        redis->sagregar(com, shash, "!".matches[2])
                                sino
                                        enviarMensaje(msg->chat->id, "*Error de markdown*", md)
                                fin
                fin
        fin
        si matches[1] == "comandos"
                comandos = redis->smiembros(com, "custom:".msg->chat->id.":scomando")
                respuestas = "custom:".msg->chat->id.":comando"
                si comandos
                        lista_final=""
                        desde (v=0; v<lista->longitud(comandos); v++)
                                respuesta = redis->hobtener(com, respuestas, comandos[v])
                                lista_final = lista_final."\n_".comandos[v]."_: ".respuesta."."
                                imprimir(lista_final)
                        fin
                        enviarMensaje(msg->chat->id, "*Lista de comandos añadidos*".lista_final, md)
                        retorno 1
                fin
                enviarMensaje(msg->chat->id, "*No hay comandos añadidos aún*.", md)
        fin
        si matches[1] == "bienvenida"
                si ! usuario_es_admin(msg->chat->id, msg->de->id)
                        enviarMensaje(msg->chat->id, "*No eres administrador en el grupo*", md)
                        retornar 0
                fin
                hash = "status:".msg->chat->id.":bienvenida"
                hash2 = "custom:".msg->chat->id.":bienvenida"
                estado = redis->obtener(com, hash)
                elegir(matches[2])
                        caso "on":
                                si estado == "on"
                                        enviarMensaje(msg->chat->id, "La bienvenida *ya está activada*", md)
                                        retornar 0
                                fin
                                redis->asignar(com, hash, matches[2])
                                enviarMensaje(msg->chat->id, "La bienvenida *activada*", md)
                        caso "off":
                                si estado == "off"
                                        enviarMensaje(msg->chat->id, "La bienvenida *ya está desactivada*", md)
                                fin
                                redis->asignar(com, hash, matches[2])
                                enviarMensaje(msg->chat->id, "La bienvenida *desactivada*", md)
                        defecto:
                                ok = enviarMensaje(msg->chat->id, "*Nueva bienvenida asignada*:\n".matches[2], md)
                                si ! ok
                                        enviarMensaje(msg->chat->id, "*El markdown está mal.*", md)
                                sino
                                        redis->asignar(com, hash2, matches[2])
                                fin
                fin
        fin
fin

retornar {
        "comandos": [
                "^/(bienvenida) (.+)$",
                "^/(comando) !([a-Z]+) (.*)$",
                "^/(comandos)$"
        ],
        "accion": mensajes
}
