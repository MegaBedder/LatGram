funcion mensajes()
        ln = leng(msg.chat.id)
        si msg.chat.tipo == "private" && matches[1] != "ln"
                enviarMensaje(msg.chat.id, ln.error.no_grupo, md)
                retornar 0
        osi !es_admin(msg.chat.id, msg.de.id) && !es_creador(msg.de.id) && !es_gadmin(msg.de.id)
                enviarMensaje(msg.chat.id, ln.error.no_admin, md)
                retornar 0
        fin
        hash = "ajustes:"..msg.chat.id
        chash = "ajustes:"..msg.chat.id..":customs"
        si matches[1] == "spam"
                si matches[2] == "on"
                        lo_agrega = redis.sagregar(com, hash, "spam")
                        si lo_agrega
                                enviarMensaje(msg.chat.id, ln.ajustes.spam_on, md)
                                retornar 0
                        fin
                        enviarMensaje(msg.chat.id, ln.ajustes.Xspam_on, md)
                osi matches[2] == "off"
                        lo_borra = redis.sborrar(com, hash, "spam")
                        si lo_borra
                                enviarMensaje(msg.chat.id, ln.ajustes.spam_off, md)
                                retornar 0
                        fin
                        enviarMensaje(msg.chat.id, ln.ajustes.Xspam_off, md)
                fin
        fin

        si matches[1] == "extras"
                si matches[2] == "on"
                        lo_agrega = redis.sagregar(com, hash, "extras")
                        si lo_agrega
                                enviarMensaje(msg.chat.id, ln.ajustes.extras_on, md)
                                retornar 0
                        fin
                        enviarMensaje(msg.chat.id, ln.ajustes.Xextras_on, md)

                osi matches[2] == "off"
                        lo_borra = redis.sborrar(com, hash, "extras")
                        si lo_borra
                                enviarMensaje(msg.chat.id, ln.ajustes.extras_off, md)
                                retornar 0
                        fin
                        enviarMensaje(msg.chat.id, ln.ajustes.Xextras_off, md)
                fin
        fin

        si matches[1] == "bienvenida"
                si matches[2] == "on"
                        lo_agrega = redis.sagregar(com, hash, "bienvenida")
                        si lo_agrega
                                enviarMensaje(msg.chat.id, ln.ajustes.bienvenida_on, md)
                                retornar 0
                        fin
                        enviarMensaje(msg.chat.id, ln.ajustes.Xbienvenida_on, md)

                osi matches[2] == "off"
                        lo_borra = redis.sborrar(com, hash, "bienvenida")
                        si lo_borra
                                enviarMensaje(msg.chat.id, ln.ajustes.bienvenida_off, md)
                                retornar 0
                        fin
                        enviarMensaje(msg.chat.id, ln.ajustes.Xbienvenida_off, md)

                osi matches[2] == "rm"
                        bienvenida = redis.hobtener(com, chash, "bienvenida")
                        si bienvenida
                                redis.hborrar(com, chash, "bienvenida")
                                enviarMensaje(msg.chat.id, ln.cajustes.bienvenida_rm, md)
                                retornar 0
                        fin
                        enviarMensaje(msg.chat.id, ln.cajustes.Xbienvenida_rm, md)

                sino
                        ok = enviarMensaje(msg.chat.id, lng(ln.cajustes.bienvenida_n, matches[2]), md)
                        si ! ok
                                enviarMensaje(msg.chat.id, ln.error.markdown, html)
                        sino
                                redis.hasignar(com, chash, "bienvenida", matches[2])
                        fin
                fin
        fin

        si matches[1] == "reglas"
                si !matches[2]
                        reglas_activadas = redis.sesmiembro(com, hash, "reglas")
                        si reglas_activadas
                                reglas_asignadas = redis.hobtener(com, chash, "reglas")
                                si reglas_asignadas
                                        enviarMensaje(msg.chat.id, reglas_asignadas, md)
                                sino
                                        enviarMensaje(msg.chat.id, ln.cajustes.reglas_no, md)
                                fin
                        fin

                osi matches[2] == "leer"
                        enviarMensaje(msg.chat.id, ln.cajustes.reglas_leer, md)
                        iniciarLeer(msg.de.id, msg.texto, 1)

                osi matches[2] == "on"
                        lo_agrega = redis.sagregar(com, hash, "reglas")
                        si lo_agrega
                                enviarMensaje(msg.chat.id, ln.ajustes.reglas_on, md)
                                retornar 0
                        fin
                        enviarMensaje(msg.chat.id, ln.ajustes.Xreglas_on, md)

                osi matches[2] == "off"
                        lo_borra = redis.sborrar(com, hash, "reglas")
                        si lo_borra
                                enviarMensaje(msg.chat.id, ln.ajustes.reglas_off, md)
                                retornar 0
                        fin
                        enviarMensaje(msg.chat.id, ln.ajustes.Xreglas_off, md)

                osi matches[2] == "rm"
                        bienvenida = redis.hobtener(com, chash, "reglas")
                        si bienvenida
                                redis.hborrar(com, chash, "reglas")
                                enviarMensaje(msg.chat.id, ln.cajustes.reglas_rm, md)
                                retornar 0
                        fin
                        enviarMensaje(msg.chat.id, ln.cajustes.Xreglas_rm, md)

                sino
                        ok = enviarMensaje(msg.chat.id, lng(ln.cajustes.reglas_n, matches[2]), md)
                        si ! ok
                                enviarMensaje(msg.chat.id, ln.error.markdown, html)
                        sino
                                redis.hasignar(com, chash, "reglas", matches[2])
                        fin
                fin
        fin

        si matches[1] == "flood"
                si matches[2] == "on"
                        lo_agrega = redis.sagregar(com, hash, "flood")
                        si lo_agrega
                                enviarMensaje(msg.chat.id, ln.ajustes.flood_on, md)
                                retornar 0
                        fin
                        enviarMensaje(msg.chat.id, ln.ajustes.Xflood_on, md)

                osi matches[2] == "off"
                        lo_borra = redis.sborrar(com, hash, "flood")
                        si lo_borra
                                enviarMensaje(msg.chat.id, ln.ajustes.flood_off, md)
                                retornar 0
                        fin
                        enviarMensaje(msg.chat.id, ln.ajustes.Xflood_off, md)

                osi matches[2] == "reset"
                        flood = redis.hobtener(com, chash, "flood")
                        si flood
                                redis.hborrar(com, chash, "flood")
                                enviarMensaje(msg.chat.id, ln.cajustes.flood_reset, md)
                                retornar 0
                        fin
                        enviarMensaje(msg.chat.id, ln.cajustes.Xflood_reset, md)

                sino
                        si anumero(matches[2]) < config.grupos.min_ajuste_mflood
                                enviarMensaje(msg.chat.id, lng(ln.cajustes.mflood_es_menor, (config.grupos.min_ajuste_mflood-1)), md)
                                retornar 0
                        osi anumero(matches[2]) > config.grupos.max_ajuste_mflood
                                enviarMensaje(msg.chat.id, lng(ln.cajustes.mflood_es_mayor, (config.grupos.max_ajuste_mflood+1)), md)
                                retornar 0
                        fin
                        enviarMensaje(msg.chat.id, lng(ln.cajustes.mflood_n, matches[2]), md)
                        redis.hasignar(com, chash, "maxfloodm", matches[2])
                fin
        fin

        si matches[1] == "tflood"
                si anumero(matches[2]) < config.grupos.min_ajuste_tflood
                        enviarMensaje(msg.chat.id, lng(ln.cajustes.tflood_es_menor, (config.grupos.min_ajuste_tflood-1)), md)
                        retornar 0
                osi anumero(matches[2]) > config.grupos.max_ajuste_tflood
                        enviarMensaje(msg.chat.id, lng(ln.cajustes.tflood_es_mayor, (config.grupos.max_ajuste_tflood+1)), md)
                        retornar 0
                fin
                enviarMensaje(msg.chat.id, lng(ln.cajustes.tflood_n, matches[2]), md)
                redis.hasignar(com, chash, "maxfloodt", matches[2])
        fin

        si matches[1] == "stickers"
                si matches[2] == "on"
                        lo_agrega = redis.sagregar(com, hash, "stickers")
                        si lo_agrega
                                enviarMensaje(msg.chat.id, ln.ajustes.stickers_on, md)
                                retornar 0
                        fin
                        enviarMensaje(msg.chat.id, ln.ajustes.Xstickers_on, md)

                osi matches[2] == "off"
                        lo_borra = redis.sborrar(com, hash, "stickers")
                        si lo_borra
                                enviarMensaje(msg.chat.id, ln.ajustes.stickers_off, md)
                                retornar 0
                        fin
                        enviarMensaje(msg.chat.id, ln.ajustes.Xstickers_off, md)
                fin
        fin

        si matches[1] == "bots"
                si matches[2] == "on"
                        lo_agrega = redis.sagregar(com, hash, "bots")
                        si lo_agrega
                                enviarMensaje(msg.chat.id, ln.ajustes.bots_on, md)
                                retornar 0
                        fin
                        enviarMensaje(msg.chat.id, ln.ajustes.Xbots_on, md)

                osi matches[2] == "off"
                        lo_borra = redis.sborrar(com, hash, "bots")
                        si lo_borra
                                enviarMensaje(msg.chat.id, ln.ajustes.bots_off, md)
                                retornar 0
                        fin
                        enviarMensaje(msg.chat.id, ln.ajustes.Xbots_off, md)
                fin
        fin

        si matches[1] == "voz"
                si matches[2] == "on"
                        lo_agrega = redis.sagregar(com, hash, "voz")
                        si lo_agrega
                                enviarMensaje(msg.chat.id, ln.ajustes.voz_on, md)
                                retornar 0
                        fin
                        enviarMensaje(msg.chat.id, ln.ajustes.Xvoz_on, md)

                osi matches[2] == "off"
                        lo_borra = redis.sborrar(com, hash, "voz")
                        si lo_borra
                                enviarMensaje(msg.chat.id, ln.ajustes.voz_off, md)
                                retornar 0
                        fin
                        enviarMensaje(msg.chat.id, ln.ajustes.Xvoz_off, md)
                fin
        fin

        si matches[1] == "fotos"
                si matches[2] == "on"
                        lo_agrega = redis.sagregar(com, hash, "fotos")
                        si lo_agrega
                                enviarMensaje(msg.chat.id, ln.ajustes.fotos_on, md)
                                retornar 0
                        fin
                        enviarMensaje(msg.chat.id, ln.ajustes.Xfotos_on, md)

                osi matches[2] == "off"
                        lo_borra = redis.sborrar(com, hash, "fotos")
                        si lo_borra
                                enviarMensaje(msg.chat.id, ln.ajustes.fotos_off, md)
                                retornar 0
                        fin
                        enviarMensaje(msg.chat.id, ln.ajustes.Xfotos_off, md)
                fin
        fin

        si matches[1] == "arabes"
                si matches[2] == "on"
                        lo_agrega = redis.sagregar(com, hash, "arabes")
                        si lo_agrega
                                enviarMensaje(msg.chat.id, ln.ajustes.arabes_on, md)
                                retornar 0
                        fin
                        enviarMensaje(msg.chat.id, ln.ajustes.Xarabes_on, md)

                osi matches[2] == "off"
                        lo_borra = redis.sborrar(com, hash, "arabes")
                        si lo_borra
                                enviarMensaje(msg.chat.id, ln.ajustes.arabes_off, md)
                                retornar 0
                        fin
                        enviarMensaje(msg.chat.id, ln.ajustes.Xarabes_off, md)
                fin
        fin

        si matches[1] == "links"
                si matches[2] == "on"
                        lo_agrega = redis.sagregar(com, hash, "links")
                        si lo_agrega
                                enviarMensaje(msg.chat.id, ln.ajustes.links_on, md)
                                retornar 0
                        fin
                        enviarMensaje(msg.chat.id, ln.ajustes.Xlinks_on, md)

                osi matches[2] == "off"
                        lo_borra = redis.sborrar(com, hash, "links")
                        si lo_borra
                                enviarMensaje(msg.chat.id, ln.ajustes.links_off, md)
                                retornar 0
                        fin
                        enviarMensaje(msg.chat.id, ln.ajustes.Xlinks_off, md)
                fin
        fin

        si matches[1] == "ln"
                si lenguaje_disponible(matches[2])
                        redis.hasignar(com, chash, "ln", matches[2])
                        enviarMensaje(msg.chat.id, lng(ln.cajustes.ln, matches[2]), md)
                sino
                        enviarMensaje(msg.chat.id, lng(ln.error.ln_falta, matches[2]), md)
                fin
        fin

fin

retornar {
        "comandos": [
                "^/(reglas)$",
                "^/(reglas) (on|off|rm|.*)$",
                "^/(flood) (on|off|reset|[0-9]+)$",
                "^/(bienvenida) (on|off|rm|.*)$",
                "^/(tflood) ([0-9]+)$",
                "^/(spam) (on|off)$",
                "^/(bots) (on|off)$",
                "^/(extras) (on|off)$",
                "^/(stickers) (on|off)$",
                "^/(voz) (on|off)$",
                "^/(fotos) (on|off)$",
                "^/(arabes) (on|off)$",
                "^/(links) (on|off)$",
                "^/(ln) ([a-Z][a-Z])$"
        ],
        "accion": mensajes
}
