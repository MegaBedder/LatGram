funcion mensajes()
        ln = leng(msg.chat.id)
        si msg.chat.tipo == "private" && matches[1] != "ln"
                enviarMensaje(msg.chat.id, ln.error[1], md)
                retornar 0
        osi !es_admin(msg.chat.id, msg.de.id) && !es_creador(msg.de.id) && !es_gadmin(msg.de.id)
                enviarMensaje(msg.chat.id, "*Debes ser administrador* para usar este comando.", md)
                retornar 0
        fin
        hash = "ajustes:"..msg.chat.id
        chash = "ajustes:"..msg.chat.id..":customs"
        si matches[1] == "spam"
                si matches[2] == "on"
                        lo_agrega = redis.sagregar(com, hash, "spam")
                        si lo_agrega
                                enviarMensaje(msg.chat.id, ln.ajustes.spam_on, md)
                                retornar 0
                        fin
                        enviarMensaje(msg.chat.id, ln.ajustes.Xspam_on, md)
                osi matches[2] == "off"
                        lo_borra = redis.sborrar(com, hash, "spam")
                        si lo_borra
                                enviarMensaje(msg.chat.id, ln.ajustes.spam_off, md)
                                retornar 0
                        fin
                        enviarMensaje(msg.chat.id, ln.ajustes.Xspam_off, md)
                fin
        fin

        si matches[1] == "extras"
                si matches[2] == "on"
                        lo_agrega = redis.sagregar(com, hash, "extras")
                        si lo_agrega
                                enviarMensaje(msg.chat.id, "Extras *activados* en este chat.", md)
                                retornar 0
                        fin
                        enviarMensaje(msg.chat.id, "Los extras *ya están activados*.", md)

                osi matches[2] == "off"
                        lo_borra = redis.sborrar(com, hash, "extras")
                        si lo_borra
                                enviarMensaje(msg.chat.id, "Extras *desactivados* en este chat.", md)
                                retornar 0
                        fin
                        enviarMensaje(msg.chat.id, "Los extras *ya están desactivados*.", md)
                fin
        fin

        si matches[1] == "bienvenida"
                si matches[2] == "on"
                        lo_agrega = redis.sagregar(com, hash, "bienvenida")
                        si lo_agrega
                                enviarMensaje(msg.chat.id, "Bienvenida *activada* en este chat.", md)
                                retornar 0
                        fin
                        enviarMensaje(msg.chat.id, "La bienvenida *ya está activada*.", md)

                osi matches[2] == "off"
                        lo_borra = redis.sborrar(com, hash, "bienvenida")
                        si lo_borra
                                enviarMensaje(msg.chat.id, "Bienvenida *desactivada* en este chat.", md)
                                retornar 0
                        fin
                        enviarMensaje(msg.chat.id, "La bienvenida *ya está desactivada*.", md)

                osi matches[2] == "rm"
                        bienvenida = redis.hobtener(com, chash, "bienvenida")
                        si bienvenida
                                redis.hborrar(com, chash, "bienvenida")
                                enviarMensaje(msg.chat.id, "Bienvenida *eliminada* del chat.", md)
                                retornar 0
                        fin
                        enviarMensaje(msg.chat.id, "La bienvenida *ya está eliminada*, la puedes desactivar con `/bienvenida off`.", md)

                sino
                        ok = enviarMensaje(msg.chat.id, "*Nueva bienvenida asignada*:\n"..matches[2], md)
                        si ! ok
                                enviarMensaje(msg.chat.id, "*Verifica el markdown*.", md)
                        sino
                                redis.hasignar(com, chash, "bienvenida", matches[2])
                        fin
                fin
        fin

        si matches[1] == "reglas"
                si matches[2] == "leer"
                        enviarMensaje(msg.chat.id, "*OK*. Ahora escribe las reglas, puedes usar markdown, puedes escribir *Detener.* para tener el proceso."
                        .."\n*NOTA*: si tu cliente de Telegram que usas cuenta con markdown, *desactivalo*.", md)
                                iniciarLeer(msg.de.id, msg.texto, 1)
                                retornar 0
                fin
                si !matches[2]
                        reglas_activadas = redis.sesmiembro(com, hash, "reglas")
                        si reglas_activadas
                                reglas_asignadas = redis.hobtener(com, chash, "reglas")
                                si reglas_asignadas
                                        enviarMensaje(msg.chat.id, reglas_asignadas, md)
                                sino
                                        enviarMensaje(msg.chat.id, "*No hay reglas asignadas en este grupo*.", md)
                                fin
                        fin
                        retornar 0
                fin
                si matches[2] == "on"
                        lo_agrega = redis.sagregar(com, hash, "reglas")
                        si lo_agrega
                                enviarMensaje(msg.chat.id, "Reglas *activadas* en este chat.", md)
                                retornar 0
                        fin
                        enviarMensaje(msg.chat.id, "Las reglas *ya están activadas*.", md)

                osi matches[2] == "off"
                        lo_borra = redis.sborrar(com, hash, "reglas")
                        si lo_borra
                                enviarMensaje(msg.chat.id, "Reglas *desactivadas* en este chat.", md)
                                retornar 0
                        fin
                        enviarMensaje(msg.chat.id, "Las reglas *ya están desactivadas*.", md)

                osi matches[2] == "rm"
                        bienvenida = redis.hobtener(com, chash, "reglas")
                        si bienvenida
                                redis.hborrar(com, chash, "reglas")
                                enviarMensaje(msg.chat.id, "Reglas *eliminadas* del chat.", md)
                                retornar 0
                        fin
                        enviarMensaje(msg.chat.id, "Las reglas *ya están eliminadas*, la puedes desactivar con `/reglas off`.", md)

                sino
                        ok = enviarMensaje(msg.chat.id, "*Nuevas reglas asignadas*:\n"..matches[2], md)
                        si ! ok
                                enviarMensaje(msg.chat.id, "*Verifica el markdown*.", md)
                        sino
                                redis.hasignar(com, chash, "reglas", matches[2])
                        fin
                fin
        fin

        si matches[1] == "flood"
                si matches[2] == "on"
                        lo_agrega = redis.sagregar(com, hash, "flood")
                        si lo_agrega
                                enviarMensaje(msg.chat.id, "Flood *permitido* en este chat.", md)
                                retornar 0
                        fin
                        enviarMensaje(msg.chat.id, "El flood *ya está permitido*.", md)

                osi matches[2] == "off"
                        lo_borra = redis.sborrar(com, hash, "flood")
                        si lo_borra
                                enviarMensaje(msg.chat.id, "Flood *no permitido* en este chat.", md)
                                retornar 0
                        fin
                        enviarMensaje(msg.chat.id, "El flood *ya no está permitido*.", md)

                osi matches[2] == "reset"
                        flood = redis.hobtener(com, chash, "flood")
                        si flood
                                redis.hborrar(com, chash, "flood")
                                enviarMensaje(msg.chat.id, "Ajustes de *flood* restaurados en este chat.", md)
                                retornar 0
                        fin
                        enviarMensaje(msg.chat.id, "El flood *ya tiene los ajustes predeterminados*, lo puedes permitir con `/flood on`.", md)

                sino
                        si anumero(matches[2]) < config.grupos.min_ajuste_mflood
                                enviarMensaje(msg.chat.id, "El número máximo de mensajes por flood *debe ser mayor a "..(config.grupos.min_ajuste_mflood-1).."*.", md)
                                retornar 0
                        osi anumero(matches[2]) > config.grupos.max_ajuste_mflood
                                enviarMensaje(msg.chat.id, "El número máximo de mensajes por flood *debe ser menor a "..(config.grupos.max_ajuste_mflood+1).."*.", md)
                                retornar 0
                        fin
                        enviarMensaje(msg.chat.id, "*Nuevo número máximo de mensajes por flood establecido*:\n"..matches[2], md)
                        redis.hasignar(com, chash, "maxfloodm", matches[2])
                fin
        fin

        si matches[1] == "tflood"
                si anumero(matches[2]) < config.grupos.min_ajuste_tflood
                        enviarMensaje(msg.chat.id, "El número máximo de tiempo por flood *debe ser mayor a "..(config.grupos.min_ajuste_tflood-1).."*.", md)
                        retornar 0
                osi anumero(matches[2]) > config.grupos.max_ajuste_tflood
                        enviarMensaje(msg.chat.id, "El número máximo de tiempo por flood *debe ser menor a "..(config.grupos.max_ajuste_tflood+1).."*.", md)
                        retornar 0
                fin
                enviarMensaje(msg.chat.id, "*Nuevo número máximo de tiempo por flood establecido*:\n"..matches[2], md)
                redis.hasignar(com, chash, "maxfloodt", matches[2])
        fin

        si matches[1] == "stickers"
                si matches[2] == "on"
                        lo_agrega = redis.sagregar(com, hash, "stickers")
                        si lo_agrega
                                enviarMensaje(msg.chat.id, "Stickers *permitidos* en este chat.", md)
                                retornar 0
                        fin
                        enviarMensaje(msg.chat.id, "Los stickers *ya están permitidos*.", md)

                osi matches[2] == "off"
                        lo_borra = redis.sborrar(com, hash, "stickers")
                        si lo_borra
                                enviarMensaje(msg.chat.id, "Stickers *no permitidos* en este chat.", md)
                                retornar 0
                        fin
                        enviarMensaje(msg.chat.id, "Los stickers *ya no están permitidos*.", md)
                fin
        fin

        si matches[1] == "bots"
                si matches[2] == "on"
                        lo_agrega = redis.sagregar(com, hash, "bots")
                        si lo_agrega
                                enviarMensaje(msg.chat.id, "Bots *permitidos* en este chat.", md)
                                retornar 0
                        fin
                        enviarMensaje(msg.chat.id, "Los bots *ya están permitidos*.", md)

                osi matches[2] == "off"
                        lo_borra = redis.sborrar(com, hash, "bots")
                        si lo_borra
                                enviarMensaje(msg.chat.id, "Bots *no permitidos* en este chat.", md)
                                retornar 0
                        fin
                        enviarMensaje(msg.chat.id, "Los bots *ya no están permitidos*.", md)
                fin
        fin

        si matches[1] == "voz"
                si matches[2] == "on"
                        lo_agrega = redis.sagregar(com, hash, "voz")
                        si lo_agrega
                                enviarMensaje(msg.chat.id, "Mensajes de voz *permitidos* en este chat.", md)
                                retornar 0
                        fin
                        enviarMensaje(msg.chat.id, "Los mensajes de voz *ya están permitidos*.", md)

                osi matches[2] == "off"
                        lo_borra = redis.sborrar(com, hash, "voz")
                        si lo_borra
                                enviarMensaje(msg.chat.id, "Mensajes de voz *no permitidos* en este chat.", md)
                                retornar 0
                        fin
                        enviarMensaje(msg.chat.id, "Los mensajes de voz *ya no están permitidos*.", md)
                fin
        fin

        si matches[1] == "fotos"
                si matches[2] == "on"
                        lo_agrega = redis.sagregar(com, hash, "fotos")
                        si lo_agrega
                                enviarMensaje(msg.chat.id, "Fotos *permitidas* en este chat.", md)
                                retornar 0
                        fin
                        enviarMensaje(msg.chat.id, "Las fotos *ya están permitidas*.", md)

                osi matches[2] == "off"
                        lo_borra = redis.sborrar(com, hash, "fotos")
                        si lo_borra
                                enviarMensaje(msg.chat.id, "Fotos *no permitidas* en este chat.", md)
                                retornar 0
                        fin
                        enviarMensaje(msg.chat.id, "Las fotos *ya no están permitidas*.", md)
                fin
        fin

        si matches[1] == "arabes"
                si matches[2] == "on"
                        lo_agrega = redis.sagregar(com, hash, "arabes")
                        si lo_agrega
                                enviarMensaje(msg.chat.id, "Arabes *permitidos* en este chat.", md)
                                retornar 0
                        fin
                        enviarMensaje(msg.chat.id, "Los arabes *ya están permitidos*.", md)

                osi matches[2] == "off"
                        lo_borra = redis.sborrar(com, hash, "arabes")
                        si lo_borra
                                enviarMensaje(msg.chat.id, "Arabes *no permitidos* en este chat.", md)
                                retornar 0
                        fin
                        enviarMensaje(msg.chat.id, "Los arabes *ya no están permitidos*.", md)
                fin
        fin

        si matches[1] == "links"
                si matches[2] == "on"
                        lo_agrega = redis.sagregar(com, hash, "links")
                        si lo_agrega
                                enviarMensaje(msg.chat.id, "Links *permitidos* en este chat.", md)
                                retornar 0
                        fin
                        enviarMensaje(msg.chat.id, "Los links *ya están permitidos*.", md)

                osi matches[2] == "off"
                        lo_borra = redis.sborrar(com, hash, "links")
                        si lo_borra
                                enviarMensaje(msg.chat.id, "Links *no permitidos* en este chat.", md)
                                retornar 0
                        fin
                        enviarMensaje(msg.chat.id, "Los links *ya no están permitidos*.", md)
                fin
        fin

        si matches[1] == "ln"
                si lenguaje_disponible(matches[2])
                        redis.hasignar(com, chash, "ln", matches[2])
                        enviarMensaje(msg.chat.id, lng(ln.ajustes.ln, matches[2]), md)
                sino
                        enviarMensaje(msg.chat.id, lng(ln.error[2], matches[2]), md)
                fin
        fin

fin

retornar {
        "comandos": [
                "^/(reglas)$",
                "^/(reglas) (on|off|rm|.*)$",
                "^/(flood) (on|off|reset|[0-9]+)$",
                "^/(bienvenida) (on|off|rm|.*)$",
                "^/(tflood) ([0-9]+)$",
                "^/(spam) (on|off)$",
                "^/(bots) (on|off)$",
                "^/(extras) (on|off)$",
                "^/(stickers) (on|off)$",
                "^/(voz) (on|off)$",
                "^/(fotos) (on|off)$",
                "^/(arabes) (on|off)$",
                "^/(links) (on|off)$",
                "^/(ln) ([a-Z][a-Z])"
        ],
        "accion": mensajes
}
