funcion no_markdown(texto, reemplazo)
        si ! reemplazo
                texto = cadena->reemplazar(texto, "*", "")
                texto = cadena->reemplazar(texto, "_", "")
                texto = cadena->reemplazar(texto, "`", "")
                retornar texto
        fin
        texto = cadena->reemplazar(texto, "*", reemplazo)
        texto = cadena->reemplazar(texto, "_", reemplazo)
        texto = cadena->reemplazar(texto, "`", reemplazo)
        retornar texto
fin

funcion bot_agregado()
        si bot->id
                si msg->agregado->id
                        si msg->agregado->id == bot->id
                                retornar verdadero
                        fin
                fin
        fin
        retornar falso
fin

funcion bot_eliminado()
        si bot->id
                si msg->eliminado->id
                        si msg->eliminado->id == bot->id
                                retornar verdadero
                        fin
                fin
        fin
        retornar falso
fin

funcion usuario_es_admin(chatId, userId)
        res = curl->peticion(URL . "getChatAdministrators?chat_id=".chatId)
        j = json->decodificar(res)
        desde (i=0; i<lista->longitud(j->result);i++)
                si j->result[i]->user->id == userId
                        retornar verdadero
                fin
        fin
        retornar falso
fin

funcion ires()
        si res
                imprimir(sistema->pipe("echo '".res."' | jq -r '.'"))
                retornar verdadero
        fin
        imprimir("Variable res no encontrada", 1)
        retornar falso
fin

funcion cargar_plugins()
        plugins = []
        desde (plugin_cargado=0; plugin_cargado<(config->plugins); plugin_cargado++)
                plugin = incluir(config->dir.config->plugins[plugin_cargado])
                lista->agregar(plugins, plugin)
        fin
        retornar plugins
fin

funcion parsear(teclado_inline)
        si tipo(teclado_inline) == "lista"
                inline = []
                desde (teclado=0;teclado<teclado_inline;teclado++)
                        lista->agregar(inline, teclado_inline[teclado])
                fin
                retornar curl->escape('{"inline_keyboard":'.inline.'}')
        fin
        imprimir("Elemento inesperado, el elemento debe ser lista, no ".tipo(teclado_inline))
fin
